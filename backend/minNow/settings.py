"""
Django settings for minNow project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import os
from dotenv import load_dotenv
import sys
import logging
import logging.config

# Configure logging first, before creating the logger
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[{levelname}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        },
    },
    "loggers": {
        "minNow": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Initialize logging configuration
logging.config.dictConfig(LOGGING)

# Create logger after configuration
log = logging.getLogger("minNow")
load_dotenv()

# Debug environment variables
print(f"PROD env var: {os.getenv('PROD')}")  # Temporary print to verify env var
print(f"DEBUG env var: {os.getenv('DEBUG')}")  # Temporary print to verify env var

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("django_secret_key")

prod = os.getenv("PROD") == "True"
log.info(f"Environment: {'Production' if prod else 'Development'}")
log.debug("test blue logger")
log.debug("This is another test debug message")
log.info("This is a test info message")

# how to debug an error only occuring on prod?
DEBUG = os.getenv("DEBUG")
ROOT_URLCONF = os.getenv("ROOT_URLCONF")

if prod:
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Add the project root directory to Python path
    sys.path.append(str(BASE_DIR))
    # log.info(f"Production BASE_DIR: {BASE_DIR}")
    # log.info(f"Python sys.path: {sys.path}")
    # log.info(
    #     f"Database settings - Host: {os.getenv('PGHOST')}, Database: {os.getenv('PGDATABASE')}"
    # )
    ALLOWED_HOSTS = ["min-nowweb-app-production.up.railway.app"]

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("PGDATABASE"),
            "USER": os.getenv("PGUSER"),
            "PASSWORD": os.getenv("PGPASSWORD"),
            "HOST": os.getenv("PGHOST", "localhost"),
            "PORT": os.getenv("PGPORT", "5432"),
            "OPTIONS": {
                "sslmode": "require",
            },
        }
    }
    # Add security settings.
    # https://adamj.eu/tech/2019/04/10/how-to-score-a+-for-security-headers-on-your-django-website/
    # https://docs.djangoproject.com/en/4.2/topics/security/
    SECURE_SSL_REDIRECT = False  # Handled by railway
    SECURE_PROXY_SSL_HEADER = (
        "HTTP_X_FORWARDED_PROTO",
        "https",
    )  # Tell Django about the proxy

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"

    SECURE_HSTS_SECONDS = 31536000  # 1 year
    # If I have subdomains
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True

    # Couple more listed in link that reqs packages downloading from A+
    # refer policy

    # django docs
    # securing user file uploads. Uploadthing suffice?
else:
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Add the project root directory to Python path
    sys.path.append(str(BASE_DIR))

    log.info(f"Dev BASE_DIR: {BASE_DIR}")
    log.info(f"Python sys.path: {sys.path}")

    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("PGDATABASE"),
            "USER": os.getenv("PGUSER"),
            "PASSWORD": os.getenv("PGPASSWORD"),
            "HOST": os.getenv("PGHOST"),
            "PORT": os.getenv("PGPORT"),
        }
    }


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "items",
    "users",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "minNow.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"
USE_TZ = True
TIME_ZONE = "America/Denver"

USE_I18N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "https://min-nowweb-app-production.up.railway.app",
    "https://min-now-frontend.vercel.app",
    "http://localhost:3000",
    "https://min-now.store",
    "https://www.min-now.store",
]

CORS_ALLOW_CREDENTIALS = True

# Update CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "https://min-nowweb-app-production.up.railway.app",
    "https://min-now-frontend.vercel.app",
    "http://localhost:3000",
    "https://min-now.store",
    "https://www.min-now.store",
]
# Add this line to ensure WhiteNoise works in production
MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")


AUTH_USER_MODEL = "users.User"
